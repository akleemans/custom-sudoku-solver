{"version":3,"sources":["./src/environments/environment.ts","./src/app/model/util.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/model/worker-message.ts","./src/app/model/constraint-type.ts","./src/app/model/constraint.ts","./src/app/app-routing.module.ts","./src/app/main/main.component.ts","./src/app/main/main.component.html","./src/app/main/main.worker.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import * as _ from 'lodash';\nimport {randomColor} from 'randomcolor';\nimport {Cell} from './cell';\n\nexport class Util {\n  /**\n   * Returns number of occurences of value in string.\n   */\n  public static count(str: string, value: string) {\n    const regExp = new RegExp(value, 'gi');\n    return (str.match(regExp) || []).length;\n  }\n\n  /**\n   * Replace all string occurences of oldVal with newVal in str.\n   */\n  public static replaceAll(str: string, oldVal: string, newVal: string) {\n    return str.replace(new RegExp(oldVal, 'g'), newVal);\n  }\n\n  /**\n   * Returns a random \"pretty\" color.\n   */\n  public static getRandomColor(): string {\n    return randomColor();\n  }\n\n  /**\n   * Builds cells from a Sudoku string like 1..32.. (etc.)\n   */\n  public static getCellsFromString(sudokuStr: string): string[] {\n    const cells = [];\n    for (const i of _.range(81)) {\n      cells.push(sudokuStr[i] === '.' ? '123456789' : sudokuStr[i]);\n    }\n    return cells;\n  }\n\n  /**\n   * Calculate the sum of the already known number of a cell array.\n   */\n  public static getValueSum(cells: Cell[]): number {\n    return _.sum(cells.filter(c => c.candidates.length === 1)\n      .map(c => +c.candidates));\n  }\n\n  /**\n   * Checks if all cells of an array are filled with one value.\n   */\n  public static allFilled(cells: Cell[]): boolean {\n    return _.every(cells.map(c => c.isSolved()));\n  }\n\n  /**\n   * Checks if there are duplicates in a cell array.\n   * Empty cells are not considered. Cells with multiple candidates are not considered.\n   */\n  public static containsDuplicates(cells: Cell[]): boolean {\n    // Remove empty values\n    const filledCellValues = cells\n      .filter(c => c.candidates.length === 1)\n      .map(c => c.candidates);\n    return _.uniq(filledCellValues).length !== filledCellValues.length;\n  }\n}\n","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n}\n","<h1>sudoku-solver.ch</h1>\n<p class=\"subtitle\">Solve special-type Sudokus with custom constraints</p>\n<div class=\"content\">\n  <router-outlet></router-outlet>\n</div>\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {FormsModule} from '@angular/forms';\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {MainComponent} from './main/main.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MainComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","export class WorkerMessage {\n  public constructor(\n    public status: WorkerStatus,\n    public content: string) {\n  }\n}\n\nexport enum WorkerStatus {\n  IDLE, // After init\n  INVALID, // Sudoku not solvable at all\n  SOLVING, // Solving in progress - content will contain progress\n  SOLVED, // Solved - content will contain solution\n  UNSOLVABLE, // No solution found\n}\n","export enum ConstraintType {\n  SINGLE_CELL_ODD_EVEN,\n  TWO_CELLS_BIGGER_THAN,\n  TWO_CELLS_EXACT_DIFFERENCE,\n  TWO_CELLS_EXACT_FACTOR,\n  MULTI_CELL_UNIT,\n  MULTI_CELL_SUM,\n  MULTI_CELL_PRODUCT\n}\n","import {ConstraintType} from './constraint-type';\nimport {Util} from './util';\n\nexport class Constraint {\n  public type: ConstraintType;\n  public cellIds: number[] = [];\n  public color: string;\n\n  // Used for SINGLE_CELL_ODD_EVEN\n  public isEven: boolean = true;\n\n  // Used for MULTI_CELL_SUM\n  public sum: number;\n\n  // Used for TWO_CELLS_EXACT_DIFFERENCE\n  public difference: number;\n\n  // Used for TWO_CELLS_EXACT_FACTOR\n  public factor: number;\n\n  // Used for TWO_CELLS_EXACT_DIFFERENCE, TWO_CELLS_EXACT_FACTOR\n  // TODO maybe not used, so remove first?\n  public unknownOrder: boolean;\n\n  // Used for MULTI_CELL_PRODUCT\n  public product;\n\n  // Used for MULTI_CELL_SUM (Killer Sudoku)\n  public noDuplicates: boolean = false;\n\n  public constructor() {\n    this.color = Util.getRandomColor();\n  }\n\n  public toString(): string {\n    const cellStr = this.cellIds.map(c => c.toString()).join(', ');\n    let desc = '';\n    switch (this.type) {\n      case ConstraintType.SINGLE_CELL_ODD_EVEN:\n        desc = 'Cells ' + cellStr;\n        if (this.isEven) {\n          desc += ' must be even';\n        } else {\n          desc += ' must be odd';\n        }\n        break;\n\n      case ConstraintType.MULTI_CELL_SUM:\n        desc = 'Cells ' + cellStr + ' must add up to ' + this.sum;\n        break;\n\n      case ConstraintType.MULTI_CELL_UNIT:\n        desc = 'Cells ' + cellStr + ' form a unit';\n        break;\n      case ConstraintType.MULTI_CELL_PRODUCT:\n        desc = 'Cells ' + cellStr + ' must multiply to ' + this.product;\n        break;\n      case ConstraintType.TWO_CELLS_BIGGER_THAN:\n        desc = 'First cell of ' + cellStr + ' is bigger than second';\n        break;\n      case ConstraintType.TWO_CELLS_EXACT_DIFFERENCE:\n        desc = 'Cells ' + cellStr + ' have difference of ' + this.difference;\n        break;\n      case ConstraintType.TWO_CELLS_EXACT_FACTOR:\n        desc = 'Cells ' + cellStr + ' have factor of ' + this.factor;\n        break;\n    }\n    return desc;\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {MainComponent} from './main/main.component';\n\nconst routes: Routes = [\n  {path: '', component: MainComponent},\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n","import * as _ from 'lodash';\nimport {Component, OnInit} from '@angular/core';\nimport {Constraint} from '../model/constraint';\nimport {ConstraintType} from '../model/constraint-type';\nimport {WorkerMessage, WorkerStatus} from '../model/worker-message';\nimport {SudokuOptions} from '../model/sudoku-options';\n\nenum ViewMode {\n  numbers,\n  constraints,\n  solving\n}\n\nclass GridCell {\n  public cellId: number;\n  public value: string = '';\n  public calculated: boolean;\n  public bgColor: string = 'white';\n  public colors: string[] = [];\n\n  public constructor(cellId: number) {\n    this.cellId = cellId;\n  }\n}\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss']\n})\nexport class MainComponent implements OnInit {\n  public viewModeEnum: typeof ViewMode = ViewMode;\n  public constraintTypeEnum: typeof ConstraintType = ConstraintType;\n\n  public viewMode: ViewMode = ViewMode.numbers;\n  public cells: GridCell[] = [];\n  public currentConstraint: Constraint = new Constraint();\n  public constraints: Constraint[] = [];\n  public useBlockUnits = true;\n\n  public status: string = '';\n  public solvingInProgress = false;\n\n  public ngOnInit(): void {\n    this.cells = _.range(81).map(i => new GridCell(i));\n\n    const sudokuStr = '.1......86....57..3....6.4.8...4.27.........5.74.6.....3.....9...79.....2...1..5.';\n    for (const i of _.range(81)) {\n      this.cells[i].value = (sudokuStr[i] === '.' ? '' : sudokuStr[i]);\n    }\n  }\n\n  public setViewMode(viewMode: ViewMode): void {\n    if (this.viewMode === ViewMode.solving) {\n      this.clearAll();\n    }\n    this.viewMode = viewMode;\n  }\n\n  public toggleSelection(cell: GridCell) {\n    if (this.currentConstraint.cellIds.includes(cell.cellId)) {\n      this.currentConstraint.cellIds = this.currentConstraint.cellIds.filter(c => c !== cell.cellId);\n      cell.bgColor = 'white';\n    } else {\n      this.currentConstraint.cellIds.push(cell.cellId);\n      cell.bgColor = this.currentConstraint.color;\n    }\n  }\n\n  public addConstraint(): void {\n    console.log('Adding constraint:', this.currentConstraint);\n    this.constraints.push(this.currentConstraint);\n    const savedType = this.currentConstraint.type;\n    // On every marked cell, add color dot\n    this.cells.filter(c => this.currentConstraint.cellIds.includes(c.cellId))\n      .forEach(c => {\n        console.log('Pushing color', this.currentConstraint.color, 'to c:', c.cellId);\n        c.colors.push(this.currentConstraint.color);\n      });\n\n    this.currentConstraint = new Constraint();\n    this.currentConstraint.type = savedType;\n    this.resetSelection();\n  }\n\n  public deleteConstraint(constraint: Constraint): void {\n    this.constraints = this.constraints.filter(c => c !== constraint);\n    this.cells.forEach(c => c.colors = c.colors.filter(col => col !== constraint.color));\n  }\n\n  public clearCells(): void {\n    this.cells.forEach(cell => {\n      cell.value = '';\n      cell.colors = [];\n    });\n    this.viewMode = ViewMode.numbers;\n  }\n\n  public clearConstraints(): void {\n    this.constraints = [];\n  }\n\n  public clearAll(): void {\n    this.clearCells();\n    this.clearConstraints();\n  }\n\n  public resetSelection(): void {\n    this.cells.forEach(cell => cell.bgColor = 'white');\n  }\n\n  public solve(): void {\n    this.resetSelection();\n    this.setViewMode(ViewMode.solving);\n    this.status = 'Solving...';\n    this.solvingInProgress = true;\n    // Create a new worker\n    const worker = new Worker('./main.worker', {type: 'module'});\n    worker.onmessage = event => {\n      console.log(`MainComponent got worker message: ${event.data}!`);\n      const message: WorkerMessage = event.data;\n      switch (message.status) {\n        case WorkerStatus.SOLVED:\n          this.adaptSolution(message.content);\n          this.status = `Solved!`;\n          this.solvingInProgress = false;\n          worker.terminate();\n          break;\n        case WorkerStatus.SOLVING:\n          this.status = 'Solving: ' + message.content;\n          break;\n        case WorkerStatus.INVALID:\n        case WorkerStatus.UNSOLVABLE:\n          worker.terminate();\n          this.solvingInProgress = false;\n          this.status = 'Sudoku not solvable!';\n          break;\n      }\n    };\n    const sudokuOptions: SudokuOptions = {\n      cells: this.cells.map(c => c.value),\n      constraints: this.constraints,\n      globalOptions: {\n        useBlockUnits: true\n      }\n    };\n    worker.postMessage(sudokuOptions);\n  }\n\n  private adaptSolution(sudokuStr: string): void {\n    // Set values on cells\n    for (const i of _.range(81)) {\n      const cell = this.cells[i];\n      if (cell.value === '') {\n        cell.calculated = true;\n        cell.value = sudokuStr[i];\n      }\n    }\n  }\n}\n","<div class=\"toggle-buttons btn-group\" role=\"group\">\n  <button type=\"button\" [class.active]=\"viewMode === viewModeEnum.numbers\" class=\"btn btn-outline-dark\"\n          (click)=\"setViewMode(viewModeEnum.numbers)\">\n    Enter numbers\n  </button>\n  <button type=\"button\" [class.active]=\"viewMode === viewModeEnum.constraints\" class=\"btn btn-outline-dark\"\n          (click)=\"setViewMode(viewModeEnum.constraints)\">\n    Add constraints\n  </button>\n</div>\n\n<div *ngIf=\"viewMode === viewModeEnum.numbers\" class=\"flex-container\">\n  <div class=\"grid left-side\">\n    <ul>\n      <li *ngFor=\"let cell of cells;\">\n        <input type=\"text\" [(ngModel)]=\"cell.value\" maxlength=\"1\" autocomplete=\"false\"\n               [style.color]=\"cell.calculated ? 'green' : 'blue'\">\n      </li>\n    </ul>\n  </div>\n\n  <div class=\"right-side\">\n    <p>\n      Enter the numbers which are already known.\n    </p>\n\n    <p>\n      For a regular Sudoku, click \"solve\" below, else add contraints\n      by switching to the \"Add constraints\" view.\n    </p>\n\n    <button type=\"button\" class=\"btn btn-outline-dark\" (click)=\"solve()\">\n      Solve\n    </button>\n    <button type=\"button\" class=\"btn btn-outline-dark\" (click)=\"clearCells()\">\n      Clear\n    </button>\n  </div>\n</div>\n\n<div *ngIf=\"viewMode === viewModeEnum.constraints\" class=\"flex-container\">\n  <div class=\"grid left-side\">\n    <ul style=\"cursor: pointer;\">\n      <li *ngFor=\"let cell of cells\" (click)=\"toggleSelection(cell)\"\n          [style.background-color]=\"cell.bgColor\">\n\n        <span *ngFor=\"let color of cell.colors; let i = index\" [style.margin-bottom]=\"(30 - 30 * (i%3)) + 'px'\"\n              [style.margin-right]=\"(30 - 60 * (i - i%3)/3) + 'px'\"\n              [style.background]=\"color\" class=\"smalldot\"></span>\n\n        <span [style.color]=\"cell.calculated ? 'green' : 'black'\">\n          {{cell.value}}\n        </span>\n      </li>\n    </ul>\n  </div>\n\n  <div class=\"right-side\">\n    <p>\n      Click on cells to select them ({{currentConstraint.cellIds.length}} selected)\n    </p>\n\n    <select class=\"custom-select\" [(ngModel)]=\"currentConstraint.type\">\n      <option selected>Choose constraint type</option>\n      <option [disabled]=\"currentConstraint.cellIds.length === 0\" [ngValue]=\"constraintTypeEnum.SINGLE_CELL_ODD_EVEN\">\n        Odd or even cell(s)\n      </option>\n      <!--\n      <option [disabled]=\"currentConstraint.cellIds.length !== 2\" [ngValue]=\"ConstraintType.TWO_CELLS_BIGGER_THAN\">\n        Two cells: Bigger/smaller than\n      </option>\n      -->\n      <!--\n      <option [disabled]=\"currentConstraint.cellIds.length !== 2\" [ngValue]=\"ConstraintType.TWO_CELLS_EXACT_DIFFERENCE\">\n        Two cells: Exact difference\n      </option>\n      -->\n      <!--\n      <option [disabled]=\"currentConstraint.cellIds.length !== 2\" [ngValue]=\"ConstraintType.TWO_CELLS_EXACT_FACTOR\">\n        Two cells: Exact factor\n      </option>\n      -->\n      <option [disabled]=\"currentConstraint.cellIds.length !== 9\" [ngValue]=\"constraintTypeEnum.MULTI_CELL_UNIT\">\n        Multiple cells: Complete unit (1-9)\n      </option>\n      <option [disabled]=\"currentConstraint.cellIds.length < 2\" [ngValue]=\"constraintTypeEnum.MULTI_CELL_SUM\">\n        Multiple cells: sum\n      </option>\n      <!--\n      <option [disabled]=\"currentConstraint.cellIds.length < 2\" [ngValue]=\"ConstraintType.MULTI_CELL_PRODUCT\">\n        Multiple cells: product\n      </option>\n      -->\n    </select>\n\n    <!-- Type descriptions -->\n    <div *ngIf=\"currentConstraint.type === undefined\" style=\"height: 100px;\">\n      Choose a constraint type to show its description.\n    </div>\n\n    <div *ngIf=\"currentConstraint.type === constraintTypeEnum.SINGLE_CELL_ODD_EVEN\">\n      <p><b>Description:</b> One or more cells which are odd or even.</p>\n      <div class=\"form-inline\">\n        <b>Choose if odd/even:</b>\n        <select class=\"form-control custom-select\" [(ngModel)]=\"currentConstraint.isEven\">\n          <option [value]=\"true\">Even</option>\n          <option [value]=\"false\">Odd</option>\n        </select>\n      </div>\n    </div>\n\n    <div *ngIf=\"currentConstraint.type === constraintTypeEnum.MULTI_CELL_SUM\">\n      <p><b>Description:</b> Multiple cells must add up to a sum.</p>\n      <div class=\"form-inline\">\n        <b>Enter sum:</b>\n        <input class=\"form-control\" type=\"number\" [(ngModel)]=\"currentConstraint.sum\">\n      </div>\n\n      <div class=\"form-inline\">\n        <input class=\"form-control\" style=\"margin-right: 5px;\" type=\"checkbox\"\n               [(ngModel)]=\"currentConstraint.noDuplicates\">\n        No duplicates (Killer Sudoku)\n      </div>\n    </div>\n\n    <button type=\"button\" class=\"btn btn-outline-dark\" (click)=\"addConstraint()\"\n            [disabled]=\"currentConstraint.cellIds.length === 0 || currentConstraint.type === undefined\">\n      Add\n    </button>\n    <hr>\n    <b>List of Constraints:</b>\n    <div class=\"constraint-list\">\n      <div *ngFor=\"let constraint of constraints\">\n        <span [style.background]=\"constraint.color\" class=\"mydot\"></span>\n        {{constraint.toString()}}\n        <svg (click)=\"deleteConstraint(constraint)\" style=\"cursor: pointer;\" class=\"bi bi-trash\" width=\"1em\"\n             height=\"1em\" viewBox=\"0 0 16 16\"\n             fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path\n            d=\"M5.5 5.5A.5.5 0 016 6v6a.5.5 0 01-1 0V6a.5.5 0 01.5-.5zm2.5 0a.5.5 0 01.5.5v6a.5.5 0 01-1 0V6a.5.5 0 01.5-.5zm3 .5a.5.5 0 00-1 0v6a.5.5 0 001 0V6z\"/>\n          <path fill-rule=\"evenodd\"\n                d=\"M14.5 3a1 1 0 01-1 1H13v9a2 2 0 01-2 2H5a2 2 0 01-2-2V4h-.5a1 1 0 01-1-1V2a1 1 0 011-1H6a1 1 0 011-1h2a1 1 0 011 1h3.5a1 1 0 011 1v1zM4.118 4L4 4.059V13a1 1 0 001 1h6a1 1 0 001-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"\n                clip-rule=\"evenodd\"/>\n        </svg>\n      </div>\n    </div>\n\n    <b>Global options</b>\n    <div style=\"margin-bottom: 20px;\">\n      <input type=\"checkbox\" [(ngModel)]=\"useBlockUnits\"> Use standard 3x3 block units\n    </div>\n\n    <button type=\"button\" class=\"btn btn-outline-dark\" (click)=\"solve()\">\n      Solve\n    </button>\n  </div>\n</div>\n\n<div *ngIf=\"viewMode === viewModeEnum.solving\" class=\"flex-container\">\n  <div class=\"grid left-side\">\n    <ul>\n      <li *ngFor=\"let cell of cells;\">\n        <input type=\"text\" [(ngModel)]=\"cell.value\" maxlength=\"1\" autocomplete=\"false\"\n               [style.color]=\"cell.calculated ? 'green' : 'blue'\">\n      </li>\n    </ul>\n  </div>\n\n  <div class=\"right-side\">\n    <p>\n      Status: {{status}}\n    </p>\n\n    <div *ngIf=\"solvingInProgress\" class=\"spinner-border\" role=\"status\">\n      <!-- <span class=\"sr-only\">Loading...</span>-->\n    </div>\n\n    <button *ngIf=\"!solvingInProgress\" type=\"button\" class=\"btn btn-outline-dark\" (click)=\"clearAll()\">\n      Clear\n    </button>\n  </div>\n</div>\n\n<div class=\"showcase\">\n  This webapp lets you solve custom Sudokus, and a wide range of known 9x9 Sudoku types:\n  <ul>\n    <li>\n      <b>Sudoku X</b>: Two additional diagonal units\n    </li>\n    <li>\n      <b>Hyper Sudoku</b>: Four additional units\n    </li>\n    <li>\n      <b>Killer Sudoku (Sum Sudoku)</b>: Regions of variable size must form sums\n    </li>\n    <li>\n      <b>Nonomino</b>: No 3x3 block units, but 9 custom, irregular units instead\n    </li>\n    <li>\n      <b>Odd-Even Sudoku</b>: Normal Sudoku with odd/even constraints\n    </li>\n    <!--\n    <li>\n      <b>Greater/Less Than Sudoku</b>: Normal Sudoku with greater/less than constraints\n    </li>\n    -->\n    <li>\n      Custom combinations of the above (for example special Sudokus for Geocaching puzzles)\n    </li>\n  </ul>\n\n  <h3>Technical details</h3>\n  <p>\n    The solver is based on backtracking as described by <a href=\"https://norvig.com/sudoku.html\">Peter Norvig</a>.\n    It uses custom constraints for propagation and a different heuristic (based on the entered constraints) to optimize\n    the search.\n    The solving is done inside of a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\">\n    Web Worker</a>.\n  </p>\n  <p>\n    The solver is open source (MIT license) and available on <a\n    href=\"https://github.com/akleemans/sudoku-solver.ch\">Github</a>.\n  </p>\n  <p>\n    The grid is based on the work of <a href=\"https://codepen.io/sdobson\">Sam Dobson</a>.\n    The random colors are generated by <a href=\"https://github.com/davidmerfield/randomColor\">randomColor</a>.\n  </p>\n\n  <p style=\"margin-bottom: 50px;\">\n    &copy; 2021 by <a href=\"https://www.kleemans.ch\">Adrianus Kleemans</a>\n  </p>\n</div>\n","module.exports = __webpack_public_path__ + \"0-es2015.worker.js\"","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}