{"version":3,"sources":["webpack:///src/environments/environment.ts","webpack:///src/app/model/util.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/model/worker-message.ts","webpack:///src/app/model/constraint-type.ts","webpack:///src/app/model/constraint.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/main/main.component.ts","webpack:///src/app/main/main.component.html","webpack:///src/app/main/main.worker.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["environment","production","Util","str","value","regExp","RegExp","match","length","oldVal","newVal","replace","sudokuStr","cells","i","push","filter","c","candidates","map","isSolved","filledCellValues","AppComponent","AppModule","WorkerMessage","status","content","WorkerStatus","ConstraintType","Constraint","cellIds","isEven","noDuplicates","color","getRandomColor","cellStr","toString","join","desc","type","SINGLE_CELL_ODD_EVEN","MULTI_CELL_SUM","sum","MULTI_CELL_UNIT","MULTI_CELL_PRODUCT","product","TWO_CELLS_BIGGER_THAN","TWO_CELLS_EXACT_DIFFERENCE","difference","TWO_CELLS_EXACT_FACTOR","factor","routes","path","component","AppRoutingModule","forRoot","relativeLinkResolution","ViewMode","GridCell","cellId","bgColor","colors","MainComponent","viewModeEnum","constraintTypeEnum","viewMode","numbers","currentConstraint","constraints","useBlockUnits","solvingInProgress","solving","clearAll","cell","includes","console","log","savedType","forEach","resetSelection","constraint","col","clearCells","clearConstraints","setViewMode","worker","Worker","onmessage","event","data","message","SOLVED","adaptSolution","terminate","SOLVING","INVALID","UNSOLVABLE","sudokuOptions","globalOptions","postMessage","calculated","module","exports","bootstrapModule","err","error","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id"],"mappings":"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","file":"main-es5.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import * as _ from 'lodash';\nimport {randomColor} from 'randomcolor';\nimport {Cell} from './cell';\n\nexport class Util {\n  /**\n   * Returns number of occurences of value in string.\n   */\n  public static count(str: string, value: string) {\n    const regExp = new RegExp(value, 'gi');\n    return (str.match(regExp) || []).length;\n  }\n\n  /**\n   * Replace all string occurences of oldVal with newVal in str.\n   */\n  public static replaceAll(str: string, oldVal: string, newVal: string) {\n    return str.replace(new RegExp(oldVal, 'g'), newVal);\n  }\n\n  /**\n   * Returns a random \"pretty\" color.\n   */\n  public static getRandomColor(): string {\n    return randomColor();\n  }\n\n  /**\n   * Builds cells from a Sudoku string like 1..32.. (etc.)\n   */\n  public static getCellsFromString(sudokuStr: string): string[] {\n    const cells = [];\n    for (const i of _.range(81)) {\n      cells.push(sudokuStr[i] === '.' ? '123456789' : sudokuStr[i]);\n    }\n    return cells;\n  }\n\n  /**\n   * Calculate the sum of the already known number of a cell array.\n   */\n  public static getValueSum(cells: Cell[]): number {\n    return _.sum(cells.filter(c => c.candidates.length === 1)\n      .map(c => +c.candidates));\n  }\n\n  /**\n   * Checks if all cells of an array are filled with one value.\n   */\n  public static allFilled(cells: Cell[]): boolean {\n    return _.every(cells.map(c => c.isSolved()));\n  }\n\n  /**\n   * Checks if there are duplicates in a cell array.\n   * Empty cells are not considered. Cells with multiple candidates are not considered.\n   */\n  public static containsDuplicates(cells: Cell[]): boolean {\n    // Remove empty values\n    const filledCellValues = cells\n      .filter(c => c.candidates.length === 1)\n      .map(c => c.candidates);\n    return _.uniq(filledCellValues).length !== filledCellValues.length;\n  }\n}\n","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n}\n","<h1>sudoku-solver.ch</h1>\n<p class=\"subtitle\">Solve special-type Sudokus with custom constraints</p>\n<div class=\"content\">\n  <router-outlet></router-outlet>\n</div>\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {FormsModule} from '@angular/forms';\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {MainComponent} from './main/main.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MainComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","export class WorkerMessage {\n  public constructor(\n    public status: WorkerStatus,\n    public content: string) {\n  }\n}\n\nexport enum WorkerStatus {\n  IDLE, // After init\n  INVALID, // Sudoku not solvable at all\n  SOLVING, // Solving in progress - content will contain progress\n  SOLVED, // Solved - content will contain solution\n  UNSOLVABLE, // No solution found\n}\n","export enum ConstraintType {\n  SINGLE_CELL_ODD_EVEN,\n  TWO_CELLS_BIGGER_THAN,\n  TWO_CELLS_EXACT_DIFFERENCE,\n  TWO_CELLS_EXACT_FACTOR,\n  MULTI_CELL_UNIT,\n  MULTI_CELL_SUM,\n  MULTI_CELL_PRODUCT\n}\n","import {ConstraintType} from './constraint-type';\nimport {Util} from './util';\n\nexport class Constraint {\n  public type: ConstraintType;\n  public cellIds: number[] = [];\n  public color: string;\n\n  // Used for SINGLE_CELL_ODD_EVEN\n  public isEven: boolean = true;\n\n  // Used for MULTI_CELL_SUM\n  public sum: number;\n\n  // Used for TWO_CELLS_EXACT_DIFFERENCE\n  public difference: number;\n\n  // Used for TWO_CELLS_EXACT_FACTOR\n  public factor: number;\n\n  // Used for TWO_CELLS_EXACT_DIFFERENCE, TWO_CELLS_EXACT_FACTOR\n  // TODO maybe not used, so remove first?\n  public unknownOrder: boolean;\n\n  // Used for MULTI_CELL_PRODUCT\n  public product;\n\n  // Used for MULTI_CELL_SUM (Killer Sudoku)\n  public noDuplicates: boolean = false;\n\n  public constructor() {\n    this.color = Util.getRandomColor();\n  }\n\n  public toString(): string {\n    const cellStr = this.cellIds.map(c => c.toString()).join(', ');\n    let desc = '';\n    switch (this.type) {\n      case ConstraintType.SINGLE_CELL_ODD_EVEN:\n        desc = 'Cells ' + cellStr;\n        if (this.isEven) {\n          desc += ' must be even';\n        } else {\n          desc += ' must be odd';\n        }\n        break;\n\n      case ConstraintType.MULTI_CELL_SUM:\n        desc = 'Cells ' + cellStr + ' must add up to ' + this.sum;\n        break;\n\n      case ConstraintType.MULTI_CELL_UNIT:\n        desc = 'Cells ' + cellStr + ' form a unit';\n        break;\n      case ConstraintType.MULTI_CELL_PRODUCT:\n        desc = 'Cells ' + cellStr + ' must multiply to ' + this.product;\n        break;\n      case ConstraintType.TWO_CELLS_BIGGER_THAN:\n        desc = 'First cell of ' + cellStr + ' is bigger than second';\n        break;\n      case ConstraintType.TWO_CELLS_EXACT_DIFFERENCE:\n        desc = 'Cells ' + cellStr + ' have difference of ' + this.difference;\n        break;\n      case ConstraintType.TWO_CELLS_EXACT_FACTOR:\n        desc = 'Cells ' + cellStr + ' have factor of ' + this.factor;\n        break;\n    }\n    return desc;\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {MainComponent} from './main/main.component';\n\nconst routes: Routes = [\n  {path: '', component: MainComponent},\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n","import * as _ from 'lodash';\nimport {Component, OnInit} from '@angular/core';\nimport {Constraint} from '../model/constraint';\nimport {ConstraintType} from '../model/constraint-type';\nimport {WorkerMessage, WorkerStatus} from '../model/worker-message';\nimport {SudokuOptions} from '../model/sudoku-options';\n\nenum ViewMode {\n  numbers,\n  constraints,\n  solving\n}\n\nclass GridCell {\n  public cellId: number;\n  public value: string = '';\n  public calculated: boolean;\n  public bgColor: string = 'white';\n  public colors: string[] = [];\n\n  public constructor(cellId: number) {\n    this.cellId = cellId;\n  }\n}\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss']\n})\nexport class MainComponent implements OnInit {\n  public viewModeEnum: typeof ViewMode = ViewMode;\n  public constraintTypeEnum: typeof ConstraintType = ConstraintType;\n\n  public viewMode: ViewMode = ViewMode.numbers;\n  public cells: GridCell[] = [];\n  public currentConstraint: Constraint = new Constraint();\n  public constraints: Constraint[] = [];\n  public useBlockUnits = true;\n\n  public status: string = '';\n  public solvingInProgress = false;\n\n  public ngOnInit(): void {\n    this.cells = _.range(81).map(i => new GridCell(i));\n\n    const sudokuStr = '.1......86....57..3....6.4.8...4.27.........5.74.6.....3.....9...79.....2...1..5.';\n    for (const i of _.range(81)) {\n      this.cells[i].value = (sudokuStr[i] === '.' ? '' : sudokuStr[i]);\n    }\n  }\n\n  public setViewMode(viewMode: ViewMode): void {\n    if (this.viewMode === ViewMode.solving) {\n      this.clearAll();\n    }\n    this.viewMode = viewMode;\n  }\n\n  public toggleSelection(cell: GridCell) {\n    if (this.currentConstraint.cellIds.includes(cell.cellId)) {\n      this.currentConstraint.cellIds = this.currentConstraint.cellIds.filter(c => c !== cell.cellId);\n      cell.bgColor = 'white';\n    } else {\n      this.currentConstraint.cellIds.push(cell.cellId);\n      cell.bgColor = this.currentConstraint.color;\n    }\n  }\n\n  public addConstraint(): void {\n    console.log('Adding constraint:', this.currentConstraint);\n    this.constraints.push(this.currentConstraint);\n    const savedType = this.currentConstraint.type;\n    // On every marked cell, add color dot\n    this.cells.filter(c => this.currentConstraint.cellIds.includes(c.cellId))\n      .forEach(c => {\n        console.log('Pushing color', this.currentConstraint.color, 'to c:', c.cellId);\n        c.colors.push(this.currentConstraint.color);\n      });\n\n    this.currentConstraint = new Constraint();\n    this.currentConstraint.type = savedType;\n    this.resetSelection();\n  }\n\n  public deleteConstraint(constraint: Constraint): void {\n    this.constraints = this.constraints.filter(c => c !== constraint);\n    this.cells.forEach(c => c.colors = c.colors.filter(col => col !== constraint.color));\n  }\n\n  public clearCells(): void {\n    this.cells.forEach(cell => {\n      cell.value = '';\n      cell.colors = [];\n    });\n    this.viewMode = ViewMode.numbers;\n  }\n\n  public clearConstraints(): void {\n    this.constraints = [];\n  }\n\n  public clearAll(): void {\n    this.clearCells();\n    this.clearConstraints();\n  }\n\n  public resetSelection(): void {\n    this.cells.forEach(cell => cell.bgColor = 'white');\n  }\n\n  public solve(): void {\n    this.resetSelection();\n    this.setViewMode(ViewMode.solving);\n    this.status = 'Solving...';\n    this.solvingInProgress = true;\n    // Create a new worker\n    const worker = new Worker('./main.worker', {type: 'module'});\n    worker.onmessage = event => {\n      console.log(`MainComponent got worker message: ${event.data}!`);\n      const message: WorkerMessage = event.data;\n      switch (message.status) {\n        case WorkerStatus.SOLVED:\n          this.adaptSolution(message.content);\n          this.status = `Solved!`;\n          this.solvingInProgress = false;\n          worker.terminate();\n          break;\n        case WorkerStatus.SOLVING:\n          this.status = 'Solving: ' + message.content;\n          break;\n        case WorkerStatus.INVALID:\n        case WorkerStatus.UNSOLVABLE:\n          worker.terminate();\n          this.solvingInProgress = false;\n          this.status = 'Sudoku not solvable!';\n          break;\n      }\n    };\n    const sudokuOptions: SudokuOptions = {\n      cells: this.cells.map(c => c.value),\n      constraints: this.constraints,\n      globalOptions: {\n        useBlockUnits: true\n      }\n    };\n    worker.postMessage(sudokuOptions);\n  }\n\n  private adaptSolution(sudokuStr: string): void {\n    // Set values on cells\n    for (const i of _.range(81)) {\n      const cell = this.cells[i];\n      if (cell.value === '') {\n        cell.calculated = true;\n        cell.value = sudokuStr[i];\n      }\n    }\n  }\n}\n","<div class=\"toggle-buttons btn-group\" role=\"group\">\n  <button type=\"button\" [class.active]=\"viewMode === viewModeEnum.numbers\" class=\"btn btn-outline-dark\"\n          (click)=\"setViewMode(viewModeEnum.numbers)\">\n    Enter numbers\n  </button>\n  <button type=\"button\" [class.active]=\"viewMode === viewModeEnum.constraints\" class=\"btn btn-outline-dark\"\n          (click)=\"setViewMode(viewModeEnum.constraints)\">\n    Add constraints\n  </button>\n</div>\n\n<div *ngIf=\"viewMode === viewModeEnum.numbers\" class=\"flex-container\">\n  <div class=\"grid left-side\">\n    <ul>\n      <li *ngFor=\"let cell of cells;\">\n        <input type=\"text\" [(ngModel)]=\"cell.value\" maxlength=\"1\" autocomplete=\"false\"\n               [style.color]=\"cell.calculated ? 'green' : 'blue'\">\n      </li>\n    </ul>\n  </div>\n\n  <div class=\"right-side\">\n    <p>\n      Enter the numbers which are already known.\n    </p>\n\n    <p>\n      For a regular Sudoku, click \"solve\" below, else add contraints\n      by switching to the \"Add constraints\" view.\n    </p>\n\n    <button type=\"button\" class=\"btn btn-outline-dark\" (click)=\"solve()\">\n      Solve\n    </button>\n    <button type=\"button\" class=\"btn btn-outline-dark\" (click)=\"clearCells()\">\n      Clear\n    </button>\n  </div>\n</div>\n\n<div *ngIf=\"viewMode === viewModeEnum.constraints\" class=\"flex-container\">\n  <div class=\"grid left-side\">\n    <ul style=\"cursor: pointer;\">\n      <li *ngFor=\"let cell of cells\" (click)=\"toggleSelection(cell)\"\n          [style.background-color]=\"cell.bgColor\">\n\n        <span *ngFor=\"let color of cell.colors; let i = index\" [style.margin-bottom]=\"(30 - 30 * (i%3)) + 'px'\"\n              [style.margin-right]=\"(30 - 60 * (i - i%3)/3) + 'px'\"\n              [style.background]=\"color\" class=\"smalldot\"></span>\n\n        <span [style.color]=\"cell.calculated ? 'green' : 'black'\">\n          {{cell.value}}\n        </span>\n      </li>\n    </ul>\n  </div>\n\n  <div class=\"right-side\">\n    <p>\n      Click on cells to select them ({{currentConstraint.cellIds.length}} selected)\n    </p>\n\n    <select class=\"custom-select\" [(ngModel)]=\"currentConstraint.type\">\n      <option selected>Choose constraint type</option>\n      <option [disabled]=\"currentConstraint.cellIds.length === 0\" [ngValue]=\"constraintTypeEnum.SINGLE_CELL_ODD_EVEN\">\n        Odd or even cell(s)\n      </option>\n      <!--\n      <option [disabled]=\"currentConstraint.cellIds.length !== 2\" [ngValue]=\"ConstraintType.TWO_CELLS_BIGGER_THAN\">\n        Two cells: Bigger/smaller than\n      </option>\n      -->\n      <!--\n      <option [disabled]=\"currentConstraint.cellIds.length !== 2\" [ngValue]=\"ConstraintType.TWO_CELLS_EXACT_DIFFERENCE\">\n        Two cells: Exact difference\n      </option>\n      -->\n      <!--\n      <option [disabled]=\"currentConstraint.cellIds.length !== 2\" [ngValue]=\"ConstraintType.TWO_CELLS_EXACT_FACTOR\">\n        Two cells: Exact factor\n      </option>\n      -->\n      <option [disabled]=\"currentConstraint.cellIds.length !== 9\" [ngValue]=\"constraintTypeEnum.MULTI_CELL_UNIT\">\n        Multiple cells: Complete unit (1-9)\n      </option>\n      <option [disabled]=\"currentConstraint.cellIds.length < 2\" [ngValue]=\"constraintTypeEnum.MULTI_CELL_SUM\">\n        Multiple cells: sum\n      </option>\n      <!--\n      <option [disabled]=\"currentConstraint.cellIds.length < 2\" [ngValue]=\"ConstraintType.MULTI_CELL_PRODUCT\">\n        Multiple cells: product\n      </option>\n      -->\n    </select>\n\n    <!-- Type descriptions -->\n    <div *ngIf=\"currentConstraint.type === undefined\" style=\"height: 100px;\">\n      Choose a constraint type to show its description.\n    </div>\n\n    <div *ngIf=\"currentConstraint.type === constraintTypeEnum.SINGLE_CELL_ODD_EVEN\">\n      <p><b>Description:</b> One or more cells which are odd or even.</p>\n      <div class=\"form-inline\">\n        <b>Choose if odd/even:</b>\n        <select class=\"form-control custom-select\" [(ngModel)]=\"currentConstraint.isEven\">\n          <option [value]=\"true\">Even</option>\n          <option [value]=\"false\">Odd</option>\n        </select>\n      </div>\n    </div>\n\n    <div *ngIf=\"currentConstraint.type === constraintTypeEnum.MULTI_CELL_SUM\">\n      <p><b>Description:</b> Multiple cells must add up to a sum.</p>\n      <div class=\"form-inline\">\n        <b>Enter sum:</b>\n        <input class=\"form-control\" type=\"number\" [(ngModel)]=\"currentConstraint.sum\">\n      </div>\n\n      <div class=\"form-inline\">\n        <input class=\"form-control\" style=\"margin-right: 5px;\" type=\"checkbox\"\n               [(ngModel)]=\"currentConstraint.noDuplicates\">\n        No duplicates (Killer Sudoku)\n      </div>\n    </div>\n\n    <button type=\"button\" class=\"btn btn-outline-dark\" (click)=\"addConstraint()\"\n            [disabled]=\"currentConstraint.cellIds.length === 0 || currentConstraint.type === undefined\">\n      Add\n    </button>\n    <hr>\n    <b>List of Constraints:</b>\n    <div class=\"constraint-list\">\n      <div *ngFor=\"let constraint of constraints\">\n        <span [style.background]=\"constraint.color\" class=\"mydot\"></span>\n        {{constraint.toString()}}\n        <svg (click)=\"deleteConstraint(constraint)\" style=\"cursor: pointer;\" class=\"bi bi-trash\" width=\"1em\"\n             height=\"1em\" viewBox=\"0 0 16 16\"\n             fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path\n            d=\"M5.5 5.5A.5.5 0 016 6v6a.5.5 0 01-1 0V6a.5.5 0 01.5-.5zm2.5 0a.5.5 0 01.5.5v6a.5.5 0 01-1 0V6a.5.5 0 01.5-.5zm3 .5a.5.5 0 00-1 0v6a.5.5 0 001 0V6z\"/>\n          <path fill-rule=\"evenodd\"\n                d=\"M14.5 3a1 1 0 01-1 1H13v9a2 2 0 01-2 2H5a2 2 0 01-2-2V4h-.5a1 1 0 01-1-1V2a1 1 0 011-1H6a1 1 0 011-1h2a1 1 0 011 1h3.5a1 1 0 011 1v1zM4.118 4L4 4.059V13a1 1 0 001 1h6a1 1 0 001-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"\n                clip-rule=\"evenodd\"/>\n        </svg>\n      </div>\n    </div>\n\n    <b>Global options</b>\n    <div style=\"margin-bottom: 20px;\">\n      <input type=\"checkbox\" [(ngModel)]=\"useBlockUnits\"> Use standard 3x3 block units\n    </div>\n\n    <button type=\"button\" class=\"btn btn-outline-dark\" (click)=\"solve()\">\n      Solve\n    </button>\n  </div>\n</div>\n\n<div *ngIf=\"viewMode === viewModeEnum.solving\" class=\"flex-container\">\n  <div class=\"grid left-side\">\n    <ul>\n      <li *ngFor=\"let cell of cells;\">\n        <input type=\"text\" [(ngModel)]=\"cell.value\" maxlength=\"1\" autocomplete=\"false\"\n               [style.color]=\"cell.calculated ? 'green' : 'blue'\">\n      </li>\n    </ul>\n  </div>\n\n  <div class=\"right-side\">\n    <p>\n      Status: {{status}}\n    </p>\n\n    <div *ngIf=\"solvingInProgress\" class=\"spinner-border\" role=\"status\">\n      <!-- <span class=\"sr-only\">Loading...</span>-->\n    </div>\n\n    <button *ngIf=\"!solvingInProgress\" type=\"button\" class=\"btn btn-outline-dark\" (click)=\"clearAll()\">\n      Clear\n    </button>\n  </div>\n</div>\n\n<div class=\"showcase\">\n  This webapp lets you solve custom Sudokus, and a wide range of known 9x9 Sudoku types:\n  <ul>\n    <li>\n      <b>Sudoku X</b>: Two additional diagonal units\n    </li>\n    <li>\n      <b>Hyper Sudoku</b>: Four additional units\n    </li>\n    <li>\n      <b>Killer Sudoku (Sum Sudoku)</b>: Regions of variable size must form sums\n    </li>\n    <li>\n      <b>Nonomino</b>: No 3x3 block units, but 9 custom, irregular units instead\n    </li>\n    <li>\n      <b>Odd-Even Sudoku</b>: Normal Sudoku with odd/even constraints\n    </li>\n    <!--\n    <li>\n      <b>Greater/Less Than Sudoku</b>: Normal Sudoku with greater/less than constraints\n    </li>\n    -->\n    <li>\n      Custom combinations of the above (for example special Sudokus for Geocaching puzzles)\n    </li>\n  </ul>\n\n  <h3>Technical details</h3>\n  <p>\n    The solver is based on backtracking as described by <a href=\"https://norvig.com/sudoku.html\">Peter Norvig</a>.\n    It uses custom constraints for propagation and a different heuristic (based on the entered constraints) to optimize\n    the search.\n    The solving is done inside of a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\">\n    Web Worker</a>.\n  </p>\n  <p>\n    The solver is open source (MIT license) and available on <a\n    href=\"https://github.com/akleemans/sudoku-solver.ch\">Github</a>.\n  </p>\n  <p>\n    The grid is based on the work of <a href=\"https://codepen.io/sdobson\">Sam Dobson</a>.\n    The random colors are generated by <a href=\"https://github.com/davidmerfield/randomColor\">randomColor</a>.\n  </p>\n\n  <p style=\"margin-bottom: 50px;\">\n    &copy; 2021 by <a href=\"https://www.kleemans.ch\">Adrianus Kleemans</a>\n  </p>\n</div>\n","module.exports = __webpack_public_path__ + \"0-es2015.worker.js\"","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}